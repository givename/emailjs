{"version":3,"file":"email.js","sources":["smtp/address.ts","smtp/date.ts","smtp/mime.ts","smtp/message.ts","smtp/error.ts","smtp/response.ts","smtp/connection.ts","smtp/client.ts"],"sourcesContent":["interface AddressToken {\n\ttype: 'operator' | 'text';\n\tvalue: string;\n}\n\nexport interface AddressObject {\n\taddress?: string;\n\tname?: string;\n\tgroup?: AddressObject[];\n}\n\n/*\n * Operator tokens and which tokens are expected to end the sequence\n */\nconst OPERATORS = new Map([\n\t['\"', '\"'],\n\t['(', ')'],\n\t['<', '>'],\n\t[',', ''],\n\t// Groups are ended by semicolons\n\t[':', ';'],\n\t// Semicolons are not a legal delimiter per the RFC2822 grammar other\n\t// than for terminating a group, but they are also not valid for any\n\t// other use in this context.  Given that some mail clients have\n\t// historically allowed the semicolon as a delimiter equivalent to the\n\t// comma in their UI, it makes sense to treat them the same as a comma\n\t// when used outside of a group.\n\t[';', ''],\n]);\n\n/**\n * Tokenizes the original input string\n *\n * @param {string | string[] | undefined} address string(s) to tokenize\n * @return {AddressToken[]} An array of operator|text tokens\n */\nfunction tokenizeAddress(address: string | string[] = '') {\n\tconst tokens: AddressToken[] = [];\n\tlet token: AddressToken | undefined = undefined;\n\tlet operator: string | undefined = undefined;\n\n\tfor (const character of address.toString()) {\n\t\tif ((operator?.length ?? 0) > 0 && character === operator) {\n\t\t\ttokens.push({ type: 'operator', value: character });\n\t\t\ttoken = undefined;\n\t\t\toperator = undefined;\n\t\t} else if ((operator?.length ?? 0) === 0 && OPERATORS.has(character)) {\n\t\t\ttokens.push({ type: 'operator', value: character });\n\t\t\ttoken = undefined;\n\t\t\toperator = OPERATORS.get(character);\n\t\t} else {\n\t\t\tif (token == null) {\n\t\t\t\ttoken = { type: 'text', value: character };\n\t\t\t\ttokens.push(token);\n\t\t\t} else {\n\t\t\t\ttoken.value += character;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn tokens\n\t\t.map((x) => {\n\t\t\tx.value = x.value.trim();\n\t\t\treturn x;\n\t\t})\n\t\t.filter((x) => x.value.length > 0);\n}\n\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {AddressToken[]} tokens Tokens object\n * @return {AddressObject[]} addresses object array\n */\nfunction convertAddressTokens(tokens: AddressToken[]) {\n\tconst addressObjects: AddressObject[] = [];\n\tconst groups: string[] = [];\n\tlet addresses: string[] = [];\n\tlet comments: string[] = [];\n\tlet texts: string[] = [];\n\n\tlet state = 'text';\n\tlet isGroup = false;\n\tfunction handleToken(token: AddressToken) {\n\t\tif (token.type === 'operator') {\n\t\t\tswitch (token.value) {\n\t\t\t\tcase '<':\n\t\t\t\t\tstate = 'address';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '(':\n\t\t\t\t\tstate = 'comment';\n\t\t\t\t\tbreak;\n\t\t\t\tcase ':':\n\t\t\t\t\tstate = 'group';\n\t\t\t\t\tisGroup = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstate = 'text';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (token.value.length > 0) {\n\t\t\tswitch (state) {\n\t\t\t\tcase 'address':\n\t\t\t\t\taddresses.push(token.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'comment':\n\t\t\t\t\tcomments.push(token.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'group':\n\t\t\t\t\tgroups.push(token.value);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttexts.push(token.value);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Filter out <addresses>, (comments) and regular text\n\tfor (const token of tokens) {\n\t\thandleToken(token);\n\t}\n\n\t// If there is no text but a comment, replace the two\n\tif (texts.length === 0 && comments.length > 0) {\n\t\ttexts = [...comments];\n\t\tcomments = [];\n\t}\n\n\t// http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n\tif (isGroup) {\n\t\taddressObjects.push({\n\t\t\tname: texts.length === 0 ? undefined : texts.join(' '),\n\t\t\tgroup: groups.length > 0 ? addressparser(groups.join(',')) : [],\n\t\t});\n\t} else {\n\t\t// If no address was found, try to detect one from regular text\n\t\tif (addresses.length === 0 && texts.length > 0) {\n\t\t\tfor (let i = texts.length - 1; i >= 0; i--) {\n\t\t\t\tif (texts[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n\t\t\t\t\taddresses = texts.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// still no address\n\t\t\tif (addresses.length === 0) {\n\t\t\t\tfor (let i = texts.length - 1; i >= 0; i--) {\n\t\t\t\t\ttexts[i] = texts[i]\n\t\t\t\t\t\t.replace(/\\s*\\b[^@\\s]+@[^@\\s]+\\b\\s*/, (address: string) => {\n\t\t\t\t\t\t\tif (addresses.length === 0) {\n\t\t\t\t\t\t\t\taddresses = [address.trim()];\n\t\t\t\t\t\t\t\treturn ' ';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn address;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.trim();\n\n\t\t\t\t\tif (addresses.length > 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If there's still is no text but a comment exixts, replace the two\n\t\tif (texts.length === 0 && comments.length > 0) {\n\t\t\ttexts = [...comments];\n\t\t\tcomments = [];\n\t\t}\n\n\t\t// Keep only the first address occurence, push others to regular text\n\t\tif (addresses.length > 1) {\n\t\t\ttexts = [...texts, ...addresses.splice(1)];\n\t\t}\n\n\t\tif (addresses.length === 0 && isGroup) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\t// Join values with spaces\n\t\t\tlet address = addresses.join(' ');\n\t\t\tlet name = texts.length === 0 ? address : texts.join(' ');\n\n\t\t\tif (address === name) {\n\t\t\t\tif (address.match(/@/)) {\n\t\t\t\t\tname = '';\n\t\t\t\t} else {\n\t\t\t\t\taddress = '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taddressObjects.push({ address, name });\n\t\t}\n\t}\n\n\treturn addressObjects;\n}\n\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    \"Name <address@domain>\"\n *\n * will be converted to\n *\n *     [{name: \"Name\", address: \"address@domain\"}]\n *\n * @param {string | string[] | undefined} address Address field\n * @return {AddressObject[]} An array of address objects\n */\nexport function addressparser(address?: string | string[]) {\n\tconst addresses: AddressObject[] = [];\n\tlet tokens: AddressToken[] = [];\n\n\tfor (const token of tokenizeAddress(address)) {\n\t\tif (\n\t\t\ttoken.type === 'operator' &&\n\t\t\t(token.value === ',' || token.value === ';')\n\t\t) {\n\t\t\tif (tokens.length > 0) {\n\t\t\t\taddresses.push(...convertAddressTokens(tokens));\n\t\t\t}\n\t\t\ttokens = [];\n\t\t} else {\n\t\t\ttokens.push(token);\n\t\t}\n\t}\n\n\tif (tokens.length > 0) {\n\t\taddresses.push(...convertAddressTokens(tokens));\n\t}\n\n\treturn addresses;\n}\n","/**\n * @param {Date} [date] an optional date to convert to RFC2822 format\n * @param {boolean} [useUtc] whether to parse the date as UTC (default: false)\n * @returns {string} the converted date\n */\nexport function getRFC2822Date(date = new Date(), useUtc = false) {\n\tif (useUtc) {\n\t\treturn getRFC2822DateUTC(date);\n\t}\n\n\tconst dates = date\n\t\t.toString()\n\t\t.replace('GMT', '')\n\t\t.replace(/\\s\\(.*\\)$/, '')\n\t\t.split(' ');\n\n\tdates[0] = dates[0] + ',';\n\n\tconst day = dates[1];\n\tdates[1] = dates[2];\n\tdates[2] = day;\n\n\treturn dates.join(' ');\n}\n\n/**\n * @param {Date} [date] an optional date to convert to RFC2822 format (UTC)\n * @returns {string} the converted date\n */\nexport function getRFC2822DateUTC(date = new Date()) {\n\tconst dates = date.toUTCString().split(' ');\n\tdates.pop(); // remove timezone\n\tdates.push('+0000');\n\treturn dates.join(' ');\n}\n\n/**\n * RFC 2822 regex\n * @see https://tools.ietf.org/html/rfc2822#section-3.3\n * @see https://github.com/moment/moment/blob/a831fc7e2694281ce31e4f090bbcf90a690f0277/src/lib/create/from-string.js#L101\n */\nconst rfc2822re =\n\t/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\n/**\n * @param {string} [date] a string to check for conformance to the [rfc2822](https://tools.ietf.org/html/rfc2822#section-3.3) standard\n * @returns {boolean} the result of the conformance check\n */\nexport function isRFC2822Date(date: string) {\n\treturn rfc2822re.test(date);\n}\n","// adapted from https://github.com/emailjs/emailjs-mime-codec/blob/6909c706b9f09bc0e5c3faf48f723cca53e5b352/src/mimecodec.js\nimport { TextDecoder, TextEncoder } from 'util';\n\nconst encoder = new TextEncoder();\n\n/**\n * @see https://tools.ietf.org/html/rfc2045#section-6.7\n */\nconst RANGES = [\n\t[0x09], // <TAB>\n\t[0x0a], // <LF>\n\t[0x0d], // <CR>\n\t[0x20, 0x3c], // <SP>!\"#$%&'()*+,-./0123456789:;\n\t[0x3e, 0x7e], // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n];\nconst LOOKUP =\n\t'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\nconst MAX_CHUNK_LENGTH = 16383; // must be multiple of 3\nconst MAX_MIME_WORD_LENGTH = 52;\nconst MAX_B64_MIME_WORD_BYTE_LENGTH = 39;\n\nfunction tripletToBase64(num: number) {\n\treturn (\n\t\tLOOKUP[(num >> 18) & 0x3f] +\n\t\tLOOKUP[(num >> 12) & 0x3f] +\n\t\tLOOKUP[(num >> 6) & 0x3f] +\n\t\tLOOKUP[num & 0x3f]\n\t);\n}\n\nfunction encodeChunk(uint8: Uint8Array, start: number, end: number) {\n\tlet output = '';\n\tfor (let i = start; i < end; i += 3) {\n\t\toutput += tripletToBase64(\n\t\t\t(uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]\n\t\t);\n\t}\n\treturn output;\n}\n\nfunction encodeBase64(data: Uint8Array) {\n\tconst len = data.length;\n\tconst extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\tlet output = '';\n\n\t// go through the array every three bytes, we'll deal with trailing stuff later\n\tfor (let i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {\n\t\toutput += encodeChunk(\n\t\t\tdata,\n\t\t\ti,\n\t\t\ti + MAX_CHUNK_LENGTH > len2 ? len2 : i + MAX_CHUNK_LENGTH\n\t\t);\n\t}\n\n\t// pad the end with zeros, but make sure to not forget the extra bytes\n\tif (extraBytes === 1) {\n\t\tconst tmp = data[len - 1];\n\t\toutput += LOOKUP[tmp >> 2];\n\t\toutput += LOOKUP[(tmp << 4) & 0x3f];\n\t\toutput += '==';\n\t} else if (extraBytes === 2) {\n\t\tconst tmp = (data[len - 2] << 8) + data[len - 1];\n\t\toutput += LOOKUP[tmp >> 10];\n\t\toutput += LOOKUP[(tmp >> 4) & 0x3f];\n\t\toutput += LOOKUP[(tmp << 2) & 0x3f];\n\t\toutput += '=';\n\t}\n\n\treturn output;\n}\n\n/**\n * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n *\n * @param {string} str Mime encoded string to be split up\n * @param {number} maxlen Maximum length of characters for one part (minimum 12)\n * @return {string[]} lines\n */\nfunction splitMimeEncodedString(str: string, maxlen = 12) {\n\tconst minWordLength = 12; // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n\tconst maxWordLength = Math.max(maxlen, minWordLength);\n\tconst lines: string[] = [];\n\n\twhile (str.length) {\n\t\tlet curLine = str.substr(0, maxWordLength);\n\n\t\tconst match = curLine.match(/=[0-9A-F]?$/i); // skip incomplete escaped char\n\t\tif (match) {\n\t\t\tcurLine = curLine.substr(0, match.index);\n\t\t}\n\n\t\tlet done = false;\n\t\twhile (!done) {\n\t\t\tlet chr;\n\t\t\tdone = true;\n\t\t\tconst match = str.substr(curLine.length).match(/^=([0-9A-F]{2})/i); // check if not middle of a unicode char sequence\n\t\t\tif (match) {\n\t\t\t\tchr = parseInt(match[1], 16);\n\t\t\t\t// invalid sequence, move one char back anc recheck\n\t\t\t\tif (chr < 0xc2 && chr > 0x7f) {\n\t\t\t\t\tcurLine = curLine.substr(0, curLine.length - 3);\n\t\t\t\t\tdone = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (curLine.length) {\n\t\t\tlines.push(curLine);\n\t\t}\n\t\tstr = str.substr(curLine.length);\n\t}\n\n\treturn lines;\n}\n\n/**\n *\n * @param {number} nr number\n * @returns {boolean} if number is in range\n */\nfunction checkRanges(nr: number) {\n\treturn RANGES.reduce(\n\t\t(val, range) =>\n\t\t\tval ||\n\t\t\t(range.length === 1 && nr === range[0]) ||\n\t\t\t(range.length === 2 && nr >= range[0] && nr <= range[1]),\n\t\tfalse\n\t);\n}\n\n/**\n * Encodes all non printable and non ascii bytes to =XX form, where XX is the\n * byte value in hex. This function does not convert linebreaks etc. it\n * only escapes character sequences\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data Either a string or an Uint8Array\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Mime encoded string\n */\nexport function mimeEncode(data: string | Uint8Array = '', encoding = 'utf-8') {\n\tconst decoder = new TextDecoder(encoding);\n\tconst buffer =\n\t\ttypeof data === 'string'\n\t\t\t? encoder.encode(data)\n\t\t\t: encoder.encode(decoder.decode(data));\n\n\treturn buffer.reduce(\n\t\t(aggregate, ord, index) =>\n\t\t\tcheckRanges(ord) &&\n\t\t\t!(\n\t\t\t\t(ord === 0x20 || ord === 0x09) &&\n\t\t\t\t(index === buffer.length - 1 ||\n\t\t\t\t\tbuffer[index + 1] === 0x0a ||\n\t\t\t\t\tbuffer[index + 1] === 0x0d)\n\t\t\t)\n\t\t\t\t? // if the char is in allowed range, then keep as is, unless it is a ws in the end of a line\n\t\t\t\t  aggregate + String.fromCharCode(ord)\n\t\t\t\t: `${aggregate}=${ord < 0x10 ? '0' : ''}${ord\n\t\t\t\t\t\t.toString(16)\n\t\t\t\t\t\t.toUpperCase()}`,\n\t\t''\n\t);\n}\n\n/**\n * Encodes a string or an Uint8Array to an UTF-8 MIME Word\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://tools.ietf.org/html/rfc2047\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data String to be encoded\n * @param {'Q' | 'B'} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Single or several mime words joined together\n */\nexport function mimeWordEncode(\n\tdata: string | Uint8Array,\n\tmimeWordEncoding: 'Q' | 'B' = 'Q',\n\tencoding = 'utf-8'\n) {\n\tlet parts: string[] = [];\n\tconst decoder = new TextDecoder(encoding);\n\tconst str = typeof data === 'string' ? data : decoder.decode(data);\n\n\tif (mimeWordEncoding === 'Q') {\n\t\tconst encodedStr = mimeEncode(str, encoding).replace(\n\t\t\t/[^a-z0-9!*+\\-/=]/gi,\n\t\t\t(chr: string) =>\n\t\t\t\tchr === ' '\n\t\t\t\t\t? '_'\n\t\t\t\t\t: '=' +\n\t\t\t\t\t  (chr.charCodeAt(0) < 0x10 ? '0' : '') +\n\t\t\t\t\t  chr.charCodeAt(0).toString(16).toUpperCase()\n\t\t);\n\t\tparts =\n\t\t\tencodedStr.length < MAX_MIME_WORD_LENGTH\n\t\t\t\t? [encodedStr]\n\t\t\t\t: splitMimeEncodedString(encodedStr, MAX_MIME_WORD_LENGTH);\n\t} else {\n\t\t// Fits as much as possible into every line without breaking utf-8 multibyte characters' octets up across lines\n\t\tlet j = 0;\n\t\tlet i = 0;\n\t\twhile (i < str.length) {\n\t\t\tif (\n\t\t\t\tencoder.encode(str.substring(j, i)).length >\n\t\t\t\tMAX_B64_MIME_WORD_BYTE_LENGTH\n\t\t\t) {\n\t\t\t\t// we went one character too far, substring at the char before\n\t\t\t\tparts.push(str.substring(j, i - 1));\n\t\t\t\tj = i - 1;\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\t// add the remainder of the string\n\t\tstr.substring(j) && parts.push(str.substring(j));\n\t\tparts = parts.map((x) => encoder.encode(x)).map((x) => encodeBase64(x));\n\t}\n\n\treturn parts\n\t\t.map((p) => `=?UTF-8?${mimeWordEncoding}?${p}?= `)\n\t\t.join('')\n\t\t.trim();\n}\n","import type { PathLike } from 'fs';\nimport {\n\texistsSync,\n\topen as openFile,\n\tclose as closeFile,\n\tcloseSync as closeFileSync,\n\tread as readFile,\n} from 'fs';\nimport { hostname } from 'os';\nimport { Stream } from 'stream';\nimport type { Readable } from 'stream';\n\nimport { addressparser } from './address.js';\nimport { getRFC2822Date } from './date.js';\nimport { mimeWordEncode } from './mime.js';\n\nconst CRLF = '\\r\\n' as const;\n\n/**\n * MIME standard wants 76 char chunks when sending out.\n */\nexport const MIMECHUNK = 76 as const;\n\n/**\n * meets both base64 and mime divisibility\n */\nexport const MIME64CHUNK = (MIMECHUNK * 6) as 456;\n\n/**\n * size of the message stream buffer\n */\nexport const BUFFERSIZE = (MIMECHUNK * 24 * 7) as 12768;\n\nexport interface MessageAttachmentHeaders {\n\t[index: string]: string | undefined;\n\t'content-type'?: string;\n\t'content-transfer-encoding'?: BufferEncoding | '7bit' | '8bit';\n\t'content-disposition'?: string;\n}\n\nexport interface MessageAttachment {\n\t[index: string]:\n\t\t| string\n\t\t| boolean\n\t\t| MessageAttachment\n\t\t| MessageAttachment[]\n\t\t| MessageAttachmentHeaders\n\t\t| Readable\n\t\t| PathLike\n\t\t| undefined;\n\tname?: string;\n\theaders?: MessageAttachmentHeaders;\n\tinline?: boolean;\n\talternative?: MessageAttachment | boolean;\n\trelated?: MessageAttachment[];\n\tdata?: string;\n\tencoded?: boolean;\n\tstream?: Readable;\n\tpath?: PathLike;\n\ttype?: string;\n\tcharset?: string;\n\tmethod?: string;\n}\n\nexport interface MessageHeaders {\n\t[index: string]:\n\t\t| boolean\n\t\t| string\n\t\t| string[]\n\t\t| null\n\t\t| undefined\n\t\t| MessageAttachment\n\t\t| MessageAttachment[];\n\t'content-type'?: string;\n\t'message-id'?: string;\n\t'return-path'?: string | null;\n\tdate?: string;\n\tfrom: string | string[];\n\tto: string | string[];\n\tcc?: string | string[];\n\tbcc?: string | string[];\n\tsubject: string;\n\ttext: string | null;\n\tattachment?: MessageAttachment | MessageAttachment[];\n}\n\nlet counter = 0;\n\nfunction generateBoundary() {\n\tlet text = '';\n\tconst possible =\n\t\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'()+_,-./:=?\";\n\n\tfor (let i = 0; i < 69; i++) {\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\n\t}\n\n\treturn text;\n}\n\nfunction convertPersonToAddress(person: string | string[]) {\n\treturn addressparser(person)\n\t\t.map(({ name, address }) => {\n\t\t\treturn name\n\t\t\t\t? `${mimeWordEncode(name).replace(/,/g, '=2C')} <${address}>`\n\t\t\t\t: address;\n\t\t})\n\t\t.join(', ');\n}\n\nfunction convertDashDelimitedTextToSnakeCase(text: string) {\n\treturn text\n\t\t.toLowerCase()\n\t\t.replace(/^(.)|-(.)/g, (match) => match.toUpperCase());\n}\n\nexport class Message {\n\tpublic readonly attachments: MessageAttachment[] = [];\n\tpublic readonly header: Partial<MessageHeaders> = {\n\t\t'message-id': `<${new Date().getTime()}.${counter++}.${\n\t\t\tprocess.pid\n\t\t}@${hostname()}>`,\n\t\tdate: getRFC2822Date(),\n\t};\n\tpublic readonly content: string = 'text/plain; charset=utf-8';\n\tpublic readonly text?: string;\n\tpublic alternative: MessageAttachment | null = null;\n\n\t/**\n\t * Construct an rfc2822-compliant message object.\n\t *\n\t * Special notes:\n\t * - The `from` field is required.\n\t * - At least one `to`, `cc`, or `bcc` header is also required.\n\t * - You can also add whatever other headers you want.\n\t *\n\t * @see https://tools.ietf.org/html/rfc2822\n\t * @param {Partial<MessageHeaders>} headers Message headers\n\t */\n\tconstructor(headers: Partial<MessageHeaders>) {\n\t\tfor (const header in headers) {\n\t\t\t// allow user to override default content-type to override charset or send a single non-text message\n\t\t\tif (/^content-type$/i.test(header)) {\n\t\t\t\tthis.content = headers[header] as string;\n\t\t\t} else if (header === 'text') {\n\t\t\t\tthis.text = headers[header] as string;\n\t\t\t} else if (\n\t\t\t\theader === 'attachment' &&\n\t\t\t\ttypeof headers[header] === 'object'\n\t\t\t) {\n\t\t\t\tconst attachment = headers[header];\n\t\t\t\tif (Array.isArray(attachment)) {\n\t\t\t\t\tfor (let i = 0; i < attachment.length; i++) {\n\t\t\t\t\t\tthis.attach(attachment[i]);\n\t\t\t\t\t}\n\t\t\t\t} else if (attachment != null) {\n\t\t\t\t\tthis.attach(attachment);\n\t\t\t\t}\n\t\t\t} else if (header === 'subject') {\n\t\t\t\tthis.header.subject = mimeWordEncode(headers.subject as string);\n\t\t\t} else if (/^(cc|bcc|to|from)/i.test(header)) {\n\t\t\t\tthis.header[header.toLowerCase()] = convertPersonToAddress(\n\t\t\t\t\theaders[header] as string | string[]\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// allow any headers the user wants to set??\n\t\t\t\tthis.header[header.toLowerCase()] = headers[header];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Attach a file to the message.\n\t *\n\t * Can be called multiple times, each adding a new attachment.\n\t *\n\t * @public\n\t * @param {MessageAttachment} options attachment options\n\t * @returns {Message} the current instance for chaining\n\t */\n\tpublic attach(options: MessageAttachment) {\n\t\t// sender can specify an attachment as an alternative\n\t\tif (options.alternative) {\n\t\t\tthis.alternative = options;\n\t\t\tthis.alternative.charset = options.charset || 'utf-8';\n\t\t\tthis.alternative.type = options.type || 'text/html';\n\t\t\tthis.alternative.inline = true;\n\t\t} else {\n\t\t\tthis.attachments.push(options);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {{ isValid: boolean, validationError: (string | undefined) }} an object specifying whether this message is validly formatted, and the first validation error if it is not.\n\t */\n\tpublic checkValidity() {\n\t\tif (\n\t\t\ttypeof this.header.from !== 'string' &&\n\t\t\tArray.isArray(this.header.from) === false\n\t\t) {\n\t\t\treturn {\n\t\t\t\tisValid: false,\n\t\t\t\tvalidationError: 'Message must have a `from` header',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\ttypeof this.header.to !== 'string' &&\n\t\t\tArray.isArray(this.header.to) === false &&\n\t\t\ttypeof this.header.cc !== 'string' &&\n\t\t\tArray.isArray(this.header.cc) === false &&\n\t\t\ttypeof this.header.bcc !== 'string' &&\n\t\t\tArray.isArray(this.header.bcc) === false\n\t\t) {\n\t\t\treturn {\n\t\t\t\tisValid: false,\n\t\t\t\tvalidationError:\n\t\t\t\t\t'Message must have at least one `to`, `cc`, or `bcc` header',\n\t\t\t};\n\t\t}\n\n\t\tif (this.attachments.length > 0) {\n\t\t\tconst failed: string[] = [];\n\n\t\t\tthis.attachments.forEach((attachment) => {\n\t\t\t\tif (attachment.path) {\n\t\t\t\t\tif (existsSync(attachment.path) === false) {\n\t\t\t\t\t\tfailed.push(`${attachment.path} does not exist`);\n\t\t\t\t\t}\n\t\t\t\t} else if (attachment.stream) {\n\t\t\t\t\tif (!attachment.stream.readable) {\n\t\t\t\t\t\tfailed.push('attachment stream is not readable');\n\t\t\t\t\t}\n\t\t\t\t} else if (!attachment.data) {\n\t\t\t\t\tfailed.push('attachment has no data associated with it');\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tisValid: failed.length === 0,\n\t\t\t\tvalidationError: failed.join(', '),\n\t\t\t};\n\t\t}\n\n\t\treturn { isValid: true, validationError: undefined };\n\t}\n\n\t/**\n\t * @public\n\t * @deprecated does not conform to the `errback` style followed by the rest of the library, and will be removed in the next major version. use `checkValidity` instead.\n\t * @param {function(isValid: boolean, invalidReason: (string | undefined)): void} callback .\n\t * @returns {void}\n\t */\n\tpublic valid(callback: (isValid: boolean, invalidReason?: string) => void) {\n\t\tconst { isValid, validationError } = this.checkValidity();\n\t\tcallback(isValid, validationError);\n\t}\n\n\t/**\n\t * @public\n\t * @returns {MessageStream} a stream of the current message\n\t */\n\tpublic stream() {\n\t\treturn new MessageStream(this);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(Error, string): void} callback the function to call with the error and buffer\n\t * @returns {void}\n\t */\n\tpublic read(callback: (err: Error, buffer: string) => void) {\n\t\tlet buffer = '';\n\t\tconst str = this.stream();\n\t\tstr.on('data', (data) => (buffer += data));\n\t\tstr.on('end', (err) => callback(err, buffer));\n\t\tstr.on('error', (err) => callback(err, buffer));\n\t}\n\n\tpublic readAsync() {\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tthis.read((err, buffer) => {\n\t\t\t\tif (err != null) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(buffer);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nclass MessageStream extends Stream {\n\treadable = true;\n\tpaused = false;\n\tbuffer: Buffer | null = Buffer.alloc(MIMECHUNK * 24 * 7);\n\tbufferIndex = 0;\n\n\t/**\n\t * @param {Message} message the message to stream\n\t */\n\tconstructor(private message: Message) {\n\t\tsuper();\n\n\t\t/**\n\t\t * @param {string} [data] the data to output\n\t\t * @param {Function} [callback] the function\n\t\t * @param {any[]} [args] array of arguments to pass to the callback\n\t\t * @returns {void}\n\t\t */\n\t\tconst output = (data: string) => {\n\t\t\t// can we buffer the data?\n\t\t\tif (this.buffer != null) {\n\t\t\t\tconst bytes = Buffer.byteLength(data);\n\n\t\t\t\tif (bytes + this.bufferIndex < this.buffer.length) {\n\t\t\t\t\tthis.buffer.write(data, this.bufferIndex);\n\t\t\t\t\tthis.bufferIndex += bytes;\n\t\t\t\t}\n\t\t\t\t// we can't buffer the data, so ship it out!\n\t\t\t\telse if (bytes > this.buffer.length) {\n\t\t\t\t\tif (this.bufferIndex) {\n\t\t\t\t\t\tthis.emit(\n\t\t\t\t\t\t\t'data',\n\t\t\t\t\t\t\tthis.buffer.toString('utf-8', 0, this.bufferIndex)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.bufferIndex = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst loops = Math.ceil(data.length / this.buffer.length);\n\t\t\t\t\tlet loop = 0;\n\t\t\t\t\twhile (loop < loops) {\n\t\t\t\t\t\tthis.emit(\n\t\t\t\t\t\t\t'data',\n\t\t\t\t\t\t\tdata.substring(\n\t\t\t\t\t\t\t\tthis.buffer.length * loop,\n\t\t\t\t\t\t\t\tthis.buffer.length * (loop + 1)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tloop++;\n\t\t\t\t\t}\n\t\t\t\t} // we need to clean out the buffer, it is getting full\n\t\t\t\telse {\n\t\t\t\t\tif (!this.paused) {\n\t\t\t\t\t\tthis.emit(\n\t\t\t\t\t\t\t'data',\n\t\t\t\t\t\t\tthis.buffer.toString('utf-8', 0, this.bufferIndex)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.buffer.write(data, 0);\n\t\t\t\t\t\tthis.bufferIndex = bytes;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// we can't empty out the buffer, so let's wait till we resume before adding to it\n\t\t\t\t\t\tthis.once('resume', () => output(data));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @param {MessageAttachment} [attachment] the attachment whose headers you would like to output\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputAttachmentHeaders = (attachment: MessageAttachment) => {\n\t\t\tlet data: string[] = [];\n\t\t\tconst headers: Partial<MessageHeaders> = {\n\t\t\t\t'content-type':\n\t\t\t\t\tattachment.type +\n\t\t\t\t\t(attachment.charset ? `; charset=${attachment.charset}` : '') +\n\t\t\t\t\t(attachment.method ? `; method=${attachment.method}` : ''),\n\t\t\t\t'content-transfer-encoding': 'base64',\n\t\t\t\t'content-disposition': attachment.inline\n\t\t\t\t\t? 'inline'\n\t\t\t\t\t: `attachment; filename=\"${mimeWordEncode(\n\t\t\t\t\t\t\tattachment.name as string\n\t\t\t\t\t  )}\"`,\n\t\t\t};\n\n\t\t\t// allow sender to override default headers\n\t\t\tif (attachment.headers != null) {\n\t\t\t\tfor (const header in attachment.headers) {\n\t\t\t\t\theaders[header.toLowerCase()] = attachment.headers[header];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const header in headers) {\n\t\t\t\tdata = data.concat([\n\t\t\t\t\tconvertDashDelimitedTextToSnakeCase(header),\n\t\t\t\t\t': ',\n\t\t\t\t\theaders[header] as string,\n\t\t\t\t\tCRLF,\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\toutput(data.concat([CRLF]).join(''));\n\t\t};\n\n\t\t/**\n\t\t * @param {string} data the data to output as base64\n\t\t * @param {function(): void} [callback] the function to call after output is finished\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputBase64 = (data: string, callback?: () => void) => {\n\t\t\tconst loops = Math.ceil(data.length / MIMECHUNK);\n\t\t\tlet loop = 0;\n\t\t\twhile (loop < loops) {\n\t\t\t\toutput(data.substring(MIMECHUNK * loop, MIMECHUNK * (loop + 1)) + CRLF);\n\t\t\t\tloop++;\n\t\t\t}\n\t\t\tif (callback) {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t};\n\n\t\tconst outputFile = (\n\t\t\tattachment: MessageAttachment,\n\t\t\tnext: (err: NodeJS.ErrnoException | null) => void\n\t\t) => {\n\t\t\tconst chunk = MIME64CHUNK * 16;\n\t\t\tconst buffer = Buffer.alloc(chunk);\n\n\t\t\tconst inputEncoding =\n\t\t\t\tattachment?.headers?.['content-transfer-encoding'] || 'base64';\n\t\t\tconst encoding =\n\t\t\t\tinputEncoding === '7bit'\n\t\t\t\t\t? 'ascii'\n\t\t\t\t\t: inputEncoding === '8bit'\n\t\t\t\t\t? 'binary'\n\t\t\t\t\t: inputEncoding;\n\n\t\t\t/**\n\t\t\t * @param {Error} err the error to emit\n\t\t\t * @param {number} fd the file descriptor\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tconst opened = (err: NodeJS.ErrnoException | null, fd: number) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthis.emit('error', err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst readBytes = (\n\t\t\t\t\terr: NodeJS.ErrnoException | null,\n\t\t\t\t\tbytes: number\n\t\t\t\t) => {\n\t\t\t\t\tif (err || this.readable === false) {\n\t\t\t\t\t\tthis.emit(\n\t\t\t\t\t\t\t'error',\n\t\t\t\t\t\t\terr || new Error('message stream was interrupted somehow!')\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// guaranteed to be encoded without padding unless it is our last read\n\t\t\t\t\toutputBase64(buffer.toString(encoding, 0, bytes), () => {\n\t\t\t\t\t\tif (bytes == chunk) {\n\t\t\t\t\t\t\t// we read a full chunk, there might be more\n\t\t\t\t\t\t\treadFile(fd, buffer, 0, chunk, null, readBytes);\n\t\t\t\t\t\t} // that was the last chunk, we are done reading the file\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthis.removeListener('error', closeFileSync);\n\t\t\t\t\t\t\tcloseFile(fd, next);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\treadFile(fd, buffer, 0, chunk, null, readBytes);\n\t\t\t\tthis.once('error', closeFileSync);\n\t\t\t};\n\n\t\t\topenFile(attachment.path as PathLike, 'r', opened);\n\t\t};\n\n\t\t/**\n\t\t * @param {MessageAttachment} attachment the metadata to use as headers\n\t\t * @param {function(): void} callback the function to call after output is finished\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputStream = (\n\t\t\tattachment: MessageAttachment,\n\t\t\tcallback: () => void\n\t\t) => {\n\t\t\tconst { stream } = attachment;\n\t\t\tif (stream?.readable) {\n\t\t\t\tlet previous = Buffer.alloc(0);\n\n\t\t\t\tstream.resume();\n\n\t\t\t\tstream.on('end', () => {\n\t\t\t\t\toutputBase64(previous.toString('base64'), callback);\n\t\t\t\t\tthis.removeListener('pause', stream.pause);\n\t\t\t\t\tthis.removeListener('resume', stream.resume);\n\t\t\t\t\tthis.removeListener('error', stream.resume);\n\t\t\t\t});\n\n\t\t\t\tstream.on('data', (buff) => {\n\t\t\t\t\t// do we have bytes from a previous stream data event?\n\t\t\t\t\tlet buffer = Buffer.isBuffer(buff) ? buff : Buffer.from(buff);\n\n\t\t\t\t\tif (previous.byteLength > 0) {\n\t\t\t\t\t\tbuffer = Buffer.concat([previous, buffer]);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst padded = buffer.length % MIME64CHUNK;\n\t\t\t\t\tprevious = Buffer.alloc(padded);\n\n\t\t\t\t\t// encode as much of the buffer to base64 without empty bytes\n\t\t\t\t\tif (padded > 0) {\n\t\t\t\t\t\t// copy dangling bytes into previous buffer\n\t\t\t\t\t\tbuffer.copy(previous, 0, buffer.length - padded);\n\t\t\t\t\t}\n\t\t\t\t\toutputBase64(buffer.toString('base64', 0, buffer.length - padded));\n\t\t\t\t});\n\n\t\t\t\tthis.on('pause', stream.pause);\n\t\t\t\tthis.on('resume', stream.resume);\n\t\t\t\tthis.on('error', stream.resume);\n\t\t\t} else {\n\t\t\t\tthis.emit('error', { message: 'stream not readable' });\n\t\t\t}\n\t\t};\n\n\t\tconst outputAttachment = (\n\t\t\tattachment: MessageAttachment,\n\t\t\tcallback: () => void\n\t\t) => {\n\t\t\tconst build = attachment.path\n\t\t\t\t? outputFile\n\t\t\t\t: attachment.stream\n\t\t\t\t? outputStream\n\t\t\t\t: outputData;\n\t\t\toutputAttachmentHeaders(attachment);\n\t\t\tbuild(attachment, callback);\n\t\t};\n\n\t\t/**\n\t\t * @param {string} boundary the boundary text between outputs\n\t\t * @param {MessageAttachment[]} list the list of potential messages to output\n\t\t * @param {number} index the index of the list item to output\n\t\t * @param {function(): void} callback the function to call if index is greater than upper bound\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputMessage = (\n\t\t\tboundary: string,\n\t\t\tlist: MessageAttachment[],\n\t\t\tindex: number,\n\t\t\tcallback: () => void\n\t\t) => {\n\t\t\tif (index < list.length) {\n\t\t\t\toutput(`--${boundary}${CRLF}`);\n\t\t\t\tif (list[index].related) {\n\t\t\t\t\toutputRelated(list[index], () =>\n\t\t\t\t\t\toutputMessage(boundary, list, index + 1, callback)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\toutputAttachment(list[index], () =>\n\t\t\t\t\t\toutputMessage(boundary, list, index + 1, callback)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput(`${CRLF}--${boundary}--${CRLF}${CRLF}`);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t};\n\n\t\tconst outputMixed = () => {\n\t\t\tconst boundary = generateBoundary();\n\t\t\toutput(\n\t\t\t\t`Content-Type: multipart/mixed; boundary=\"${boundary}\"${CRLF}${CRLF}--${boundary}${CRLF}`\n\t\t\t);\n\n\t\t\tif (this.message.alternative == null) {\n\t\t\t\toutputText(this.message);\n\t\t\t\toutputMessage(boundary, this.message.attachments, 0, close);\n\t\t\t} else {\n\t\t\t\toutputAlternative(\n\t\t\t\t\t// typescript bug; should narrow to { alternative: MessageAttachment }\n\t\t\t\t\tthis.message as Parameters<typeof outputAlternative>[0],\n\t\t\t\t\t() => outputMessage(boundary, this.message.attachments, 0, close)\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @param {MessageAttachment} attachment the metadata to use as headers\n\t\t * @param {function(): void} callback the function to call after output is finished\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputData = (\n\t\t\tattachment: MessageAttachment,\n\t\t\tcallback: () => void\n\t\t) => {\n\t\t\toutputBase64(\n\t\t\t\tattachment.encoded\n\t\t\t\t\t? attachment.data ?? ''\n\t\t\t\t\t: Buffer.from(attachment.data ?? '').toString('base64'),\n\t\t\t\tcallback\n\t\t\t);\n\t\t};\n\n\t\t/**\n\t\t * @param {Message} message the message to output\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputText = (message: Message) => {\n\t\t\tlet data: string[] = [];\n\n\t\t\tdata = data.concat([\n\t\t\t\t'Content-Type:',\n\t\t\t\tmessage.content,\n\t\t\t\tCRLF,\n\t\t\t\t'Content-Transfer-Encoding: 7bit',\n\t\t\t\tCRLF,\n\t\t\t]);\n\t\t\tdata = data.concat(['Content-Disposition: inline', CRLF, CRLF]);\n\t\t\tdata = data.concat([message.text || '', CRLF, CRLF]);\n\n\t\t\toutput(data.join(''));\n\t\t};\n\n\t\t/**\n\t\t * @param {MessageAttachment} message the message to output\n\t\t * @param {function(): void} callback the function to call after output is finished\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputRelated = (\n\t\t\tmessage: MessageAttachment,\n\t\t\tcallback: () => void\n\t\t) => {\n\t\t\tconst boundary = generateBoundary();\n\t\t\toutput(\n\t\t\t\t`Content-Type: multipart/related; boundary=\"${boundary}\"${CRLF}${CRLF}--${boundary}${CRLF}`\n\t\t\t);\n\t\t\toutputAttachment(message, () => {\n\t\t\t\toutputMessage(boundary, message.related ?? [], 0, () => {\n\t\t\t\t\toutput(`${CRLF}--${boundary}--${CRLF}${CRLF}`);\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * @param {Message} message the message to output\n\t\t * @param {function(): void} callback the function to call after output is finished\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputAlternative = (\n\t\t\tmessage: Message & { alternative: MessageAttachment },\n\t\t\tcallback: () => void\n\t\t) => {\n\t\t\tconst boundary = generateBoundary();\n\t\t\toutput(\n\t\t\t\t`Content-Type: multipart/alternative; boundary=\"${boundary}\"${CRLF}${CRLF}--${boundary}${CRLF}`\n\t\t\t);\n\t\t\toutputText(message);\n\t\t\toutput(`--${boundary}${CRLF}`);\n\n\t\t\t/**\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tconst finish = () => {\n\t\t\t\toutput([CRLF, '--', boundary, '--', CRLF, CRLF].join(''));\n\t\t\t\tcallback();\n\t\t\t};\n\n\t\t\tif (message.alternative.related) {\n\t\t\t\toutputRelated(message.alternative, finish);\n\t\t\t} else {\n\t\t\t\toutputAttachment(message.alternative, finish);\n\t\t\t}\n\t\t};\n\n\t\tconst close = (err?: Error) => {\n\t\t\tif (err) {\n\t\t\t\tthis.emit('error', err);\n\t\t\t} else {\n\t\t\t\tthis.emit(\n\t\t\t\t\t'data',\n\t\t\t\t\tthis.buffer?.toString('utf-8', 0, this.bufferIndex) ?? ''\n\t\t\t\t);\n\t\t\t\tthis.emit('end');\n\t\t\t}\n\t\t\tthis.buffer = null;\n\t\t\tthis.bufferIndex = 0;\n\t\t\tthis.readable = false;\n\t\t\tthis.removeAllListeners('resume');\n\t\t\tthis.removeAllListeners('pause');\n\t\t\tthis.removeAllListeners('error');\n\t\t\tthis.removeAllListeners('data');\n\t\t\tthis.removeAllListeners('end');\n\t\t};\n\n\t\t/**\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputHeaderData = () => {\n\t\t\tif (this.message.attachments.length || this.message.alternative) {\n\t\t\t\toutput(`MIME-Version: 1.0${CRLF}`);\n\t\t\t\toutputMixed();\n\t\t\t} // you only have a text message!\n\t\t\telse {\n\t\t\t\toutputText(this.message);\n\t\t\t\tclose();\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @returns {void}\n\t\t */\n\t\tconst outputHeader = () => {\n\t\t\tlet data: string[] = [];\n\n\t\t\tfor (const header in this.message.header) {\n\t\t\t\t// do not output BCC in the headers (regex) nor custom Object.prototype functions...\n\t\t\t\tif (\n\t\t\t\t\t!/bcc/i.test(header) &&\n\t\t\t\t\tObject.prototype.hasOwnProperty.call(this.message.header, header)\n\t\t\t\t) {\n\t\t\t\t\tdata = data.concat([\n\t\t\t\t\t\tconvertDashDelimitedTextToSnakeCase(header),\n\t\t\t\t\t\t': ',\n\t\t\t\t\t\tthis.message.header[header] as string,\n\t\t\t\t\t\tCRLF,\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toutput(data.join(''));\n\t\t\toutputHeaderData();\n\t\t};\n\n\t\tthis.once('destroy', close);\n\t\tprocess.nextTick(outputHeader);\n\t}\n\n\t/**\n\t * @public\n\t * pause the stream\n\t * @returns {void}\n\t */\n\tpublic pause() {\n\t\tthis.paused = true;\n\t\tthis.emit('pause');\n\t}\n\n\t/**\n\t * @public\n\t * resume the stream\n\t * @returns {void}\n\t */\n\tpublic resume() {\n\t\tthis.paused = false;\n\t\tthis.emit('resume');\n\t}\n\n\t/**\n\t * @public\n\t * destroy the stream\n\t * @returns {void}\n\t */\n\tpublic destroy() {\n\t\tthis.emit(\n\t\t\t'destroy',\n\t\t\tthis.bufferIndex > 0 ? { message: 'message stream destroyed' } : null\n\t\t);\n\t}\n\n\t/**\n\t * @public\n\t * destroy the stream at first opportunity\n\t * @returns {void}\n\t */\n\tpublic destroySoon() {\n\t\tthis.emit('destroy');\n\t}\n}\n","/**\n * @readonly\n * @enum\n */\nexport const SMTPErrorStates = {\n\tCOULDNOTCONNECT: 1,\n\tBADRESPONSE: 2,\n\tAUTHFAILED: 3,\n\tTIMEDOUT: 4,\n\tERROR: 5,\n\tNOCONNECTION: 6,\n\tAUTHNOTSUPPORTED: 7,\n\tCONNECTIONCLOSED: 8,\n\tCONNECTIONENDED: 9,\n\tCONNECTIONAUTH: 10,\n} as const;\n\nexport class SMTPError extends Error {\n\tpublic code: number | null = null;\n\tpublic smtp: unknown = null;\n\tpublic previous: Error | null = null;\n\n\t/**\n\t * @protected\n\t * @param {string} message error message\n\t */\n\tprotected constructor(message: string) {\n\t\tsuper(message);\n\t}\n\n\t/**\n\t *\n\t * @param {string} message error message\n\t * @param {number} code smtp error state\n\t * @param {Error | null} error previous error\n\t * @param {unknown} smtp arbitrary data\n\t * @returns {SMTPError} error\n\t */\n\tpublic static create(\n\t\tmessage: string,\n\t\tcode: number,\n\t\terror?: Error | null,\n\t\tsmtp?: unknown\n\t) {\n\t\tconst msg = error?.message ? `${message} (${error.message})` : message;\n\t\tconst err = new SMTPError(msg);\n\n\t\terr.code = code;\n\t\terr.smtp = smtp;\n\n\t\tif (error) {\n\t\t\terr.previous = error;\n\t\t}\n\n\t\treturn err;\n\t}\n}\n","import { SMTPError, SMTPErrorStates } from './error.js';\nimport type { Socket } from 'net';\nimport type { TLSSocket } from 'tls';\n\nexport class SMTPResponseMonitor {\n\tpublic readonly stop: (err?: Error) => void;\n\n\tconstructor(\n\t\tstream: Socket | TLSSocket,\n\t\ttimeout: number,\n\t\tonerror: (err: Error) => void\n\t) {\n\t\tlet buffer = '';\n\n\t\tconst notify = () => {\n\t\t\tif (buffer.length) {\n\t\t\t\t// parse buffer for response codes\n\t\t\t\tconst line = buffer.replace('\\r', '');\n\t\t\t\tif (\n\t\t\t\t\t!(\n\t\t\t\t\t\tline\n\t\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t\t.split(/\\n/)\n\t\t\t\t\t\t\t.pop()\n\t\t\t\t\t\t\t?.match(/^(\\d{3})\\s/) ?? false\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst match = line ? line.match(/(\\d+)\\s?(.*)/) : null;\n\t\t\t\tconst data =\n\t\t\t\t\tmatch !== null\n\t\t\t\t\t\t? { code: match[1], message: match[2], data: line }\n\t\t\t\t\t\t: { code: -1, data: line };\n\n\t\t\t\tstream.emit('response', null, data);\n\t\t\t\tbuffer = '';\n\t\t\t}\n\t\t};\n\n\t\tconst error = (err: Error) => {\n\t\t\tstream.emit(\n\t\t\t\t'response',\n\t\t\t\tSMTPError.create(\n\t\t\t\t\t'connection encountered an error',\n\t\t\t\t\tSMTPErrorStates.ERROR,\n\t\t\t\t\terr\n\t\t\t\t)\n\t\t\t);\n\t\t};\n\n\t\tconst timedout = (err?: Error) => {\n\t\t\tstream.end();\n\t\t\tstream.emit(\n\t\t\t\t'response',\n\t\t\t\tSMTPError.create(\n\t\t\t\t\t'timedout while connecting to smtp server',\n\t\t\t\t\tSMTPErrorStates.TIMEDOUT,\n\t\t\t\t\terr\n\t\t\t\t)\n\t\t\t);\n\t\t};\n\n\t\tconst watch = (data: string | Buffer) => {\n\t\t\tif (data !== null) {\n\t\t\t\tbuffer += data.toString();\n\t\t\t\tnotify();\n\t\t\t}\n\t\t};\n\n\t\tconst close = (err: Error) => {\n\t\t\tstream.emit(\n\t\t\t\t'response',\n\t\t\t\tSMTPError.create(\n\t\t\t\t\t'connection has closed',\n\t\t\t\t\tSMTPErrorStates.CONNECTIONCLOSED,\n\t\t\t\t\terr\n\t\t\t\t)\n\t\t\t);\n\t\t};\n\n\t\tconst end = (err: Error) => {\n\t\t\tstream.emit(\n\t\t\t\t'response',\n\t\t\t\tSMTPError.create(\n\t\t\t\t\t'connection has ended',\n\t\t\t\t\tSMTPErrorStates.CONNECTIONENDED,\n\t\t\t\t\terr\n\t\t\t\t)\n\t\t\t);\n\t\t};\n\n\t\tthis.stop = (err) => {\n\t\t\tstream.removeAllListeners('response');\n\t\t\tstream.removeListener('data', watch);\n\t\t\tstream.removeListener('end', end);\n\t\t\tstream.removeListener('close', close);\n\t\t\tstream.removeListener('error', error);\n\n\t\t\tif (err != null && typeof onerror === 'function') {\n\t\t\t\tonerror(err);\n\t\t\t}\n\t\t};\n\n\t\tstream.on('data', watch);\n\t\tstream.on('end', end);\n\t\tstream.on('close', close);\n\t\tstream.on('error', error);\n\t\tstream.setTimeout(timeout, timedout);\n\t}\n}\n","import { createHmac } from 'crypto';\nimport { EventEmitter } from 'events';\nimport { Socket } from 'net';\nimport { hostname } from 'os';\nimport { connect, createSecureContext, TLSSocket } from 'tls';\nimport type { ConnectionOptions } from 'tls';\n\nimport { SMTPError, SMTPErrorStates } from './error.js';\nimport { SMTPResponseMonitor } from './response.js';\n\n/**\n * @readonly\n * @enum\n */\nexport const AUTH_METHODS = {\n\tPLAIN: 'PLAIN',\n\t'CRAM-MD5': 'CRAM-MD5',\n\tLOGIN: 'LOGIN',\n\tXOAUTH2: 'XOAUTH2',\n} as const;\n\n/**\n * @readonly\n * @enum\n */\nexport const SMTPState = {\n\tNOTCONNECTED: 0,\n\tCONNECTING: 1,\n\tCONNECTED: 2,\n} as const;\n\nexport const DEFAULT_TIMEOUT = 5000 as const;\n\nconst SMTP_PORT = 25 as const;\nconst SMTP_SSL_PORT = 465 as const;\nconst SMTP_TLS_PORT = 587 as const;\nconst CRLF = '\\r\\n' as const;\nconst GREYLIST_DELAY = 300 as const;\n\nlet DEBUG: 0 | 1 = 0;\n\n/**\n * @param {...any[]} args the message(s) to log\n * @returns {void}\n */\nconst log = (...args: any[]) => {\n\tif (DEBUG === 1) {\n\t\targs.forEach((d) =>\n\t\t\tconsole.log(\n\t\t\t\ttypeof d === 'object'\n\t\t\t\t\t? d instanceof Error\n\t\t\t\t\t\t? d.message\n\t\t\t\t\t\t: JSON.stringify(d)\n\t\t\t\t\t: d\n\t\t\t)\n\t\t);\n\t}\n};\n\n/**\n * @param {function(...any[]): void} callback the function to call\n * @param {...any[]} args the arguments to apply to the function\n * @returns {void}\n */\nconst caller = (callback?: (...rest: any[]) => void, ...args: any[]) => {\n\tif (typeof callback === 'function') {\n\t\tcallback(...args);\n\t}\n};\n\nexport type SMTPSocketOptions = Omit<\n\tConnectionOptions,\n\t'port' | 'host' | 'path' | 'socket' | 'timeout' | 'secureContext'\n>;\n\nexport interface SMTPConnectionOptions {\n\ttimeout: number | null;\n\tuser: string;\n\tpassword: string;\n\tdomain: string;\n\thost: string;\n\tport: number;\n\tssl: boolean | SMTPSocketOptions;\n\ttls: boolean | SMTPSocketOptions;\n\tauthentication: (keyof typeof AUTH_METHODS)[];\n\tlogger: (...args: any[]) => void;\n}\n\nexport interface ConnectOptions {\n\tssl?: boolean;\n}\n\nexport class SMTPConnection extends EventEmitter {\n\tpublic readonly user: () => string;\n\tpublic readonly password: () => string;\n\tpublic readonly timeout: number = DEFAULT_TIMEOUT;\n\n\tprotected readonly log = log;\n\tprotected readonly authentication: (keyof typeof AUTH_METHODS)[] = [\n\t\tAUTH_METHODS['CRAM-MD5'],\n\t\tAUTH_METHODS.LOGIN,\n\t\tAUTH_METHODS.PLAIN,\n\t\tAUTH_METHODS.XOAUTH2,\n\t];\n\n\tprotected _state: 0 | 1 | 2 = SMTPState.NOTCONNECTED;\n\tprotected _secure = false;\n\tprotected loggedin = false;\n\n\tprotected sock: Socket | TLSSocket | null = null;\n\tprotected features: { [index: string]: string | boolean } | null = null;\n\tprotected monitor: SMTPResponseMonitor | null = null;\n\tprotected domain = hostname();\n\tprotected host = 'localhost';\n\tprotected ssl: boolean | SMTPSocketOptions = false;\n\tprotected tls: boolean | SMTPSocketOptions = false;\n\tprotected port: number;\n\n\tprivate greylistResponseTracker = new WeakSet<(...rest: any[]) => void>();\n\n\t/**\n\t * SMTP class written using python's (2.7) smtplib.py as a base.\n\t *\n\t * To target a Message Transfer Agent (MTA), omit all options.\n\t *\n\t * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n\t */\n\tconstructor({\n\t\ttimeout,\n\t\thost,\n\t\tuser,\n\t\tpassword,\n\t\tdomain,\n\t\tport,\n\t\tssl,\n\t\ttls,\n\t\tlogger,\n\t\tauthentication,\n\t}: Partial<SMTPConnectionOptions> = {}) {\n\t\tsuper();\n\n\t\tif (Array.isArray(authentication)) {\n\t\t\tthis.authentication = authentication;\n\t\t}\n\n\t\tif (typeof timeout === 'number') {\n\t\t\tthis.timeout = timeout;\n\t\t}\n\n\t\tif (typeof domain === 'string') {\n\t\t\tthis.domain = domain;\n\t\t}\n\n\t\tif (typeof host === 'string') {\n\t\t\tthis.host = host;\n\t\t}\n\n\t\tif (\n\t\t\tssl != null &&\n\t\t\t(typeof ssl === 'boolean' ||\n\t\t\t\t(typeof ssl === 'object' && Array.isArray(ssl) === false))\n\t\t) {\n\t\t\tthis.ssl = ssl;\n\t\t}\n\n\t\tif (\n\t\t\ttls != null &&\n\t\t\t(typeof tls === 'boolean' ||\n\t\t\t\t(typeof tls === 'object' && Array.isArray(tls) === false))\n\t\t) {\n\t\t\tthis.tls = tls;\n\t\t}\n\n\t\tthis.port = port || (ssl ? SMTP_SSL_PORT : tls ? SMTP_TLS_PORT : SMTP_PORT);\n\t\tthis.loggedin = user && password ? false : true;\n\n\t\tif (!user && (password?.length ?? 0) > 0) {\n\t\t\tthrow new Error('`password` cannot be set without `user`');\n\t\t}\n\n\t\t// keep these strings hidden when quicky debugging/logging\n\t\tthis.user = () => user as string;\n\t\tthis.password = () => password as string;\n\n\t\tif (typeof logger === 'function') {\n\t\t\tthis.log = logger;\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * @param {0 | 1} level -\n\t * @returns {void}\n\t */\n\tpublic debug(level: 0 | 1) {\n\t\tDEBUG = level;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {SMTPState} the current state\n\t */\n\tpublic state() {\n\t\treturn this._state;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {boolean} whether or not the instance is authorized\n\t */\n\tpublic authorized() {\n\t\treturn this.loggedin;\n\t}\n\n\t/**\n\t * Establish an SMTP connection.\n\t *\n\t * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n\t *\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {number} [port] the port to use for the connection\n\t * @param {string} [host] the hostname to use for the connection\n\t * @param {ConnectOptions} [options={}] the options\n\t * @returns {void}\n\t */\n\tpublic connect(\n\t\tcallback: (...rest: any[]) => void,\n\t\tport: number = this.port,\n\t\thost: string = this.host,\n\t\toptions: ConnectOptions = {}\n\t) {\n\t\tthis.port = port;\n\t\tthis.host = host;\n\t\tthis.ssl = options.ssl || this.ssl;\n\n\t\tif (this._state !== SMTPState.NOTCONNECTED) {\n\t\t\tthis.quit(() => this.connect(callback, port, host, options));\n\t\t}\n\n\t\t/**\n\t\t * @returns {void}\n\t\t */\n\t\tconst connected = () => {\n\t\t\tthis.log(`connected: ${this.host}:${this.port}`);\n\n\t\t\tif (this.ssl && !this.tls) {\n\t\t\t\t// if key/ca/cert was passed in, check if connection is authorized\n\t\t\t\tif (\n\t\t\t\t\ttypeof this.ssl !== 'boolean' &&\n\t\t\t\t\tthis.sock instanceof TLSSocket &&\n\t\t\t\t\t!this.sock.authorized\n\t\t\t\t) {\n\t\t\t\t\tthis.close(true);\n\t\t\t\t\tcaller(\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t\tSMTPError.create(\n\t\t\t\t\t\t\t'could not establish an ssl connection',\n\t\t\t\t\t\t\tSMTPErrorStates.CONNECTIONAUTH\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis._secure = true;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @param {Error} err err\n\t\t * @returns {void}\n\t\t */\n\t\tconst connectedErrBack = (err?: Error) => {\n\t\t\tif (!err) {\n\t\t\t\tconnected();\n\t\t\t} else {\n\t\t\t\tthis.close(true);\n\t\t\t\tthis.log(err);\n\t\t\t\tcaller(\n\t\t\t\t\tcallback,\n\t\t\t\t\tSMTPError.create(\n\t\t\t\t\t\t'could not connect',\n\t\t\t\t\t\tSMTPErrorStates.COULDNOTCONNECT,\n\t\t\t\t\t\terr\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\tconst response = (\n\t\t\terr: Error | null | undefined,\n\t\t\tmsg: { code: string | number; data: string }\n\t\t) => {\n\t\t\tif (err) {\n\t\t\t\tif (this._state === SMTPState.NOTCONNECTED && !this.sock) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.close(true);\n\t\t\t\tcaller(callback, err);\n\t\t\t} else if (msg.code == '220') {\n\t\t\t\tthis.log(msg.data);\n\n\t\t\t\t// might happen first, so no need to wait on connected()\n\t\t\t\tthis._state = SMTPState.CONNECTED;\n\t\t\t\tcaller(callback, null, msg.data);\n\t\t\t} else {\n\t\t\t\tthis.log(`response (data): ${msg.data}`);\n\t\t\t\tthis.quit(() => {\n\t\t\t\t\tcaller(\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t\tSMTPError.create(\n\t\t\t\t\t\t\t'bad response on connection',\n\t\t\t\t\t\t\tSMTPErrorStates.BADRESPONSE,\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\tmsg.data\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tthis._state = SMTPState.CONNECTING;\n\t\tthis.log(`connecting: ${this.host}:${this.port}`);\n\n\t\tif (this.ssl) {\n\t\t\tthis.sock = connect(\n\t\t\t\tthis.port,\n\t\t\t\tthis.host.trim(),\n\t\t\t\ttypeof this.ssl === 'object' ? this.ssl : {},\n\t\t\t\tconnected\n\t\t\t);\n\t\t} else {\n\t\t\tthis.sock = new Socket();\n\t\t\tthis.sock.connect(this.port, this.host.trim(), connectedErrBack);\n\t\t}\n\n\t\tthis.monitor = new SMTPResponseMonitor(this.sock, this.timeout, () =>\n\t\t\tthis.close(true)\n\t\t);\n\t\tthis.sock.once('response', response);\n\t\tthis.sock.once('error', response); // the socket could reset or throw, so let's handle it and let the user know\n\t}\n\n\t/**\n\t * @public\n\t * @param {string} str the string to send\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic send(str: string, callback: (...args: any[]) => void) {\n\t\tif (this.sock != null && this._state === SMTPState.CONNECTED) {\n\t\t\tthis.log(str);\n\n\t\t\tthis.sock.once('response', (err, msg) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tcaller(callback, err);\n\t\t\t\t} else {\n\t\t\t\t\tthis.log(msg.data);\n\t\t\t\t\tcaller(callback, null, msg);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (this.sock.writable) {\n\t\t\t\tthis.sock.write(str);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.close(true);\n\t\t\tcaller(\n\t\t\t\tcallback,\n\t\t\t\tSMTPError.create(\n\t\t\t\t\t'no connection has been established',\n\t\t\t\t\tSMTPErrorStates.NOCONNECTION\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * @param {string} cmd command to issue\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {(number[] | number)} [codes=[250]] array codes\n\t * @returns {void}\n\t */\n\tpublic command(\n\t\tcmd: string,\n\t\tcallback: (...rest: any[]) => void,\n\t\tcodes: number[] | number = [250]\n\t) {\n\t\tconst codesArray = Array.isArray(codes)\n\t\t\t? codes\n\t\t\t: typeof codes === 'number'\n\t\t\t? [codes]\n\t\t\t: [250];\n\n\t\tconst response = (\n\t\t\terr: Error | null | undefined,\n\t\t\tmsg: { code: string | number; data: string; message: string }\n\t\t) => {\n\t\t\tif (err) {\n\t\t\t\tcaller(callback, err);\n\t\t\t} else {\n\t\t\t\tconst code = Number(msg.code);\n\t\t\t\tif (codesArray.indexOf(code) !== -1) {\n\t\t\t\t\tcaller(callback, err, msg.data, msg.message);\n\t\t\t\t} else if (\n\t\t\t\t\t(code === 450 || code === 451) &&\n\t\t\t\t\tmsg.message.toLowerCase().includes('greylist') &&\n\t\t\t\t\tthis.greylistResponseTracker.has(response) === false\n\t\t\t\t) {\n\t\t\t\t\tthis.greylistResponseTracker.add(response);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.send(cmd + CRLF, response);\n\t\t\t\t\t}, GREYLIST_DELAY);\n\t\t\t\t} else {\n\t\t\t\t\tconst suffix = msg.message ? `: ${msg.message}` : '';\n\t\t\t\t\tconst errorMessage = `bad response on command '${\n\t\t\t\t\t\tcmd.split(' ')[0]\n\t\t\t\t\t}'${suffix}`;\n\t\t\t\t\tcaller(\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t\tSMTPError.create(\n\t\t\t\t\t\t\terrorMessage,\n\t\t\t\t\t\t\tSMTPErrorStates.BADRESPONSE,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\tmsg.data\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.greylistResponseTracker.delete(response);\n\t\tthis.send(cmd + CRLF, response);\n\t}\n\n\t/**\n\t * @public\n\t * @description SMTP 'helo' command.\n\t *\n\t * Hostname to send for self command defaults to the FQDN of the local\n\t * host.\n\t *\n\t * As this command was deprecated by rfc2821, it should only be used for compatibility with non-compliant servers.\n\t * @see https://tools.ietf.org/html/rfc2821#appendix-F.3\n\t *\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} domain the domain to associate with the 'helo' request\n\t * @returns {void}\n\t */\n\tpublic helo(callback: (...rest: any[]) => void, domain?: string) {\n\t\tthis.command(`helo ${domain || this.domain}`, (err, data) => {\n\t\t\tif (err) {\n\t\t\t\tcaller(callback, err);\n\t\t\t} else {\n\t\t\t\tthis.parse_smtp_features(data);\n\t\t\t\tcaller(callback, err, data);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic starttls(callback: (...rest: any[]) => void) {\n\t\tconst response = (err: Error, msg: { data: unknown }) => {\n\t\t\tif (this.sock == null) {\n\t\t\t\tthrow new Error('null socket');\n\t\t\t}\n\n\t\t\tif (err) {\n\t\t\t\terr.message += ' while establishing a starttls session';\n\t\t\t\tcaller(callback, err);\n\t\t\t} else {\n\t\t\t\tconst secureContext = createSecureContext(\n\t\t\t\t\ttypeof this.tls === 'object' ? this.tls : {}\n\t\t\t\t);\n\t\t\t\tconst secureSocket = new TLSSocket(this.sock, { secureContext });\n\n\t\t\t\tsecureSocket.on('error', (err: Error) => {\n\t\t\t\t\tthis.close(true);\n\t\t\t\t\tcaller(callback, err);\n\t\t\t\t});\n\n\t\t\t\tthis._secure = true;\n\t\t\t\tthis.sock = secureSocket;\n\n\t\t\t\tnew SMTPResponseMonitor(this.sock, this.timeout, () =>\n\t\t\t\t\tthis.close(true)\n\t\t\t\t);\n\t\t\t\tcaller(callback, msg.data);\n\t\t\t}\n\t\t};\n\n\t\tthis.command('starttls', response, [220]);\n\t}\n\n\t/**\n\t * @public\n\t * @param {string} data the string to parse for features\n\t * @returns {void}\n\t */\n\tpublic parse_smtp_features(data: string) {\n\t\t//  According to RFC1869 some (badly written)\n\t\t//  MTA's will disconnect on an ehlo. Toss an exception if\n\t\t//  that happens -ddm\n\n\t\tdata.split('\\n').forEach((ext) => {\n\t\t\tconst parse = ext.match(/^(?:\\d+[-=]?)\\s*?([^\\s]+)(?:\\s+(.*)\\s*?)?$/);\n\n\t\t\t// To be able to communicate with as many SMTP servers as possible,\n\t\t\t// we have to take the old-style auth advertisement into account,\n\t\t\t// because:\n\t\t\t// 1) Else our SMTP feature parser gets confused.\n\t\t\t// 2) There are some servers that only advertise the auth methods we\n\t\t\t// support using the old style.\n\n\t\t\tif (parse != null && this.features != null) {\n\t\t\t\t// RFC 1869 requires a space between ehlo keyword and parameters.\n\t\t\t\t// It's actually stricter, in that only spaces are allowed between\n\t\t\t\t// parameters, but were not going to check for that here.  Note\n\t\t\t\t// that the space isn't present if there are no parameters.\n\t\t\t\tthis.features[parse[1].toLowerCase()] = parse[2] || true;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} domain the domain to associate with the 'ehlo' request\n\t * @returns {void}\n\t */\n\tpublic ehlo(callback: (...rest: any[]) => void, domain?: string) {\n\t\tthis.features = {};\n\t\tthis.command(`ehlo ${domain || this.domain}`, (err, data) => {\n\t\t\tif (err) {\n\t\t\t\tcaller(callback, err);\n\t\t\t} else {\n\t\t\t\tthis.parse_smtp_features(data);\n\n\t\t\t\tif (this.tls && !this._secure) {\n\t\t\t\t\tthis.starttls(() => this.ehlo(callback, domain));\n\t\t\t\t} else {\n\t\t\t\t\tcaller(callback, err, data);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @param {string} opt the features keyname to check\n\t * @returns {boolean} whether the extension exists\n\t */\n\tpublic has_extn(opt: string) {\n\t\treturn (this.features ?? {})[opt.toLowerCase()] === undefined;\n\t}\n\n\t/**\n\t * @public\n\t * @description SMTP 'help' command, returns text from the server\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} domain the domain to associate with the 'help' request\n\t * @returns {void}\n\t */\n\tpublic help(callback: (...rest: any[]) => void, domain: string) {\n\t\tthis.command(domain ? `help ${domain}` : 'help', callback, [211, 214]);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic rset(callback: (...rest: any[]) => void) {\n\t\tthis.command('rset', callback);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic noop(callback: (...rest: any[]) => void) {\n\t\tthis.send('noop', callback);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} from the sender\n\t * @returns {void}\n\t */\n\tpublic mail(callback: (...rest: any[]) => void, from: string) {\n\t\tthis.command(`mail FROM:${from}`, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} to the receiver\n\t * @returns {void}\n\t */\n\tpublic rcpt(callback: (...rest: any[]) => void, to: string) {\n\t\tthis.command(`RCPT TO:${to}`, callback, [250, 251]);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic data(callback: (...rest: any[]) => void) {\n\t\tthis.command('data', callback, [354]);\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic data_end(callback: (...rest: any[]) => void) {\n\t\tthis.command(`${CRLF}.`, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @param {string} data the message to send\n\t * @returns {void}\n\t */\n\tpublic message(data: string) {\n\t\tthis.log(data);\n\t\tthis.sock?.write(data) ?? this.log('no socket to write to');\n\t}\n\n\t/**\n\t * @public\n\t * @description SMTP 'verify' command -- checks for address validity.\n\t * @param {string} address the address to validate\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic verify(address: string, callback: (...rest: any[]) => void) {\n\t\tthis.command(`vrfy ${address}`, callback, [250, 251, 252]);\n\t}\n\n\t/**\n\t * @public\n\t * @description SMTP 'expn' command -- expands a mailing list.\n\t * @param {string} address the mailing list to expand\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @returns {void}\n\t */\n\tpublic expn(address: string, callback: (...rest: any[]) => void) {\n\t\tthis.command(`expn ${address}`, callback);\n\t}\n\n\t/**\n\t * @public\n\t * @description Calls this.ehlo() and, if an error occurs, this.helo().\n\t *\n\t * If there has been no previous EHLO or HELO command self session, self\n\t * method tries ESMTP EHLO first.\n\t *\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} [domain] the domain to associate with the command\n\t * @returns {void}\n\t */\n\tpublic ehlo_or_helo_if_needed(\n\t\tcallback: (...rest: any[]) => void,\n\t\tdomain?: string\n\t) {\n\t\t// is this code callable...?\n\t\tif (!this.features) {\n\t\t\tconst response = (err: Error, data: unknown) =>\n\t\t\t\tcaller(callback, err, data);\n\t\t\tthis.ehlo((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthis.helo(response, domain);\n\t\t\t\t} else {\n\t\t\t\t\tcaller(callback, err, data);\n\t\t\t\t}\n\t\t\t}, domain);\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t *\n\t * Log in on an SMTP server that requires authentication.\n\t *\n\t * If there has been no previous EHLO or HELO command self session, self\n\t * method tries ESMTP EHLO first.\n\t *\n\t * This method will return normally if the authentication was successful.\n\t *\n\t * @param {function(...any[]): void} callback function to call after response\n\t * @param {string} [user] the username to authenticate with\n\t * @param {string} [password] the password for the authentication\n\t * @param {{ method: string, domain: string }} [options] login options\n\t * @returns {void}\n\t */\n\tpublic login(\n\t\tcallback: (...rest: any[]) => void,\n\t\tuser?: string,\n\t\tpassword?: string,\n\t\toptions: { method?: string; domain?: string } = {}\n\t) {\n\t\tconst login = {\n\t\t\tuser: user ? () => user : this.user,\n\t\t\tpassword: password ? () => password : this.password,\n\t\t\tmethod: options?.method?.toUpperCase() ?? '',\n\t\t};\n\n\t\tconst domain = options?.domain || this.domain;\n\n\t\tconst initiate = (err: Error | null | undefined, data: unknown) => {\n\t\t\tif (err) {\n\t\t\t\tcaller(callback, err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet method: keyof typeof AUTH_METHODS | null = null;\n\n\t\t\t/**\n\t\t\t * @param {string} challenge challenge\n\t\t\t * @returns {string} base64 cram hash\n\t\t\t */\n\t\t\tconst encodeCramMd5 = (challenge: string) => {\n\t\t\t\tconst hmac = createHmac('md5', login.password());\n\t\t\t\thmac.update(Buffer.from(challenge, 'base64').toString('ascii'));\n\t\t\t\treturn Buffer.from(`${login.user()} ${hmac.digest('hex')}`).toString(\n\t\t\t\t\t'base64'\n\t\t\t\t);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @returns {string} base64 login/password\n\t\t\t */\n\t\t\tconst encodePlain = () =>\n\t\t\t\tBuffer.from(`\\u0000${login.user()}\\u0000${login.password()}`).toString(\n\t\t\t\t\t'base64'\n\t\t\t\t);\n\n\t\t\t/**\n\t\t\t * @see https://developers.google.com/gmail/xoauth2_protocol\n\t\t\t * @returns {string} base64 xoauth2 auth token\n\t\t\t */\n\t\t\tconst encodeXoauth2 = () =>\n\t\t\t\tBuffer.from(\n\t\t\t\t\t`user=${login.user()}\\u0001auth=Bearer ${login.password()}\\u0001\\u0001`\n\t\t\t\t).toString('base64');\n\n\t\t\t// List of authentication methods we support: from preferred to\n\t\t\t// less preferred methods.\n\t\t\tif (!method) {\n\t\t\t\tconst preferred = this.authentication;\n\t\t\t\tlet auth = '';\n\n\t\t\t\tif (typeof this.features?.['auth'] === 'string') {\n\t\t\t\t\tauth = this.features['auth'];\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < preferred.length; i++) {\n\t\t\t\t\tif (auth.includes(preferred[i])) {\n\t\t\t\t\t\tmethod = preferred[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * handle bad responses from command differently\n\t\t\t * @param {Error} err err\n\t\t\t * @param {unknown} data data\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tconst failed = (err: Error, data: unknown) => {\n\t\t\t\tthis.loggedin = false;\n\t\t\t\tthis.close(); // if auth is bad, close the connection, it won't get better by itself\n\t\t\t\tcaller(\n\t\t\t\t\tcallback,\n\t\t\t\t\tSMTPError.create(\n\t\t\t\t\t\t'authorization.failed',\n\t\t\t\t\t\tSMTPErrorStates.AUTHFAILED,\n\t\t\t\t\t\terr,\n\t\t\t\t\t\tdata\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @param {Error} err err\n\t\t\t * @param {unknown} data data\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tconst response = (err: Error | null | undefined, data: unknown) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tfailed(err, data);\n\t\t\t\t} else {\n\t\t\t\t\tthis.loggedin = true;\n\t\t\t\t\tcaller(callback, err, data);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @param {Error} err err\n\t\t\t * @param {unknown} data data\n\t\t\t * @param {string} msg msg\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tconst attempt = (\n\t\t\t\terr: Error | null | undefined,\n\t\t\t\tdata: unknown,\n\t\t\t\tmsg: string\n\t\t\t) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tfailed(err, data);\n\t\t\t\t} else {\n\t\t\t\t\tif (method === AUTH_METHODS['CRAM-MD5']) {\n\t\t\t\t\t\tthis.command(encodeCramMd5(msg), response, [235, 503]);\n\t\t\t\t\t} else if (method === AUTH_METHODS.LOGIN) {\n\t\t\t\t\t\tthis.command(\n\t\t\t\t\t\t\tBuffer.from(login.password()).toString('base64'),\n\t\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t\t[235, 503]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @param {Error} err err\n\t\t\t * @param {unknown} data data\n\t\t\t * @param {string} msg msg\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tconst attemptUser = (err: Error, data: unknown) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tfailed(err, data);\n\t\t\t\t} else {\n\t\t\t\t\tif (method === AUTH_METHODS.LOGIN) {\n\t\t\t\t\t\tthis.command(\n\t\t\t\t\t\t\tBuffer.from(login.user()).toString('base64'),\n\t\t\t\t\t\t\tattempt,\n\t\t\t\t\t\t\t[334]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tswitch (method) {\n\t\t\t\tcase AUTH_METHODS['CRAM-MD5']:\n\t\t\t\t\tthis.command(`AUTH  ${AUTH_METHODS['CRAM-MD5']}`, attempt, [334]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AUTH_METHODS.LOGIN:\n\t\t\t\t\tthis.command(`AUTH ${AUTH_METHODS.LOGIN}`, attemptUser, [334]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AUTH_METHODS.PLAIN:\n\t\t\t\t\tthis.command(\n\t\t\t\t\t\t`AUTH ${AUTH_METHODS.PLAIN} ${encodePlain()}`,\n\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t[235, 503]\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AUTH_METHODS.XOAUTH2:\n\t\t\t\t\tthis.command(\n\t\t\t\t\t\t`AUTH ${AUTH_METHODS.XOAUTH2} ${encodeXoauth2()}`,\n\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t[235, 503]\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcaller(\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t\tSMTPError.create(\n\t\t\t\t\t\t\t'no form of authorization supported',\n\t\t\t\t\t\t\tSMTPErrorStates.AUTHNOTSUPPORTED,\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tthis.ehlo_or_helo_if_needed(initiate, domain);\n\t}\n\n\t/**\n\t * @public\n\t * @param {boolean} [force=false] whether or not to force destroy the connection\n\t * @returns {void}\n\t */\n\tpublic close(force = false) {\n\t\tif (this.sock) {\n\t\t\tif (force) {\n\t\t\t\tthis.log('smtp connection destroyed!');\n\t\t\t\tthis.sock.destroy();\n\t\t\t} else {\n\t\t\t\tthis.log('smtp connection closed.');\n\t\t\t\tthis.sock.end();\n\t\t\t}\n\t\t}\n\n\t\tif (this.monitor) {\n\t\t\tthis.monitor.stop();\n\t\t\tthis.monitor = null;\n\t\t}\n\n\t\tthis._state = SMTPState.NOTCONNECTED;\n\t\tthis._secure = false;\n\t\tthis.sock = null;\n\t\tthis.features = null;\n\t\tthis.loggedin = !(this.user() && this.password());\n\t}\n\n\t/**\n\t * @public\n\t * @param {function(...any[]): void} [callback] function to call after response\n\t * @returns {void}\n\t */\n\tpublic quit(callback?: (...rest: any[]) => void) {\n\t\tthis.command(\n\t\t\t'quit',\n\t\t\t(err, data) => {\n\t\t\t\tcaller(callback, err, data);\n\t\t\t\tthis.close();\n\t\t\t},\n\t\t\t[221, 250]\n\t\t);\n\t}\n}\n","import { addressparser } from './address.js';\nimport type { MessageAttachment, MessageHeaders } from './message.js';\nimport { Message } from './message.js';\nimport type { SMTPConnectionOptions } from './connection.js';\nimport { SMTPConnection, SMTPState } from './connection.js';\n\nexport type MessageCallback<T = Message | MessageHeaders> = <\n\tU extends Error | null,\n\tV extends U extends Error ? T : Message\n>(\n\terr: U,\n\tmsg: V\n) => void;\n\nexport interface MessageStack {\n\tcallback: MessageCallback;\n\tmessage: Message;\n\tattachment: MessageAttachment;\n\ttext: string;\n\treturnPath: string;\n\tfrom: string;\n\tto: ReturnType<typeof addressparser>;\n\tcc: string[];\n\tbcc: string[];\n}\n\nexport class SMTPClient {\n\tpublic readonly smtp: SMTPConnection;\n\tpublic readonly queue: MessageStack[] = [];\n\n\tprotected sending = false;\n\tprotected ready = false;\n\tprotected timer: NodeJS.Timer | null = null;\n\n\t/**\n\t * Create a standard SMTP client backed by a self-managed SMTP connection.\n\t *\n\t * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n\t *\n\t * @param {SMTPConnectionOptions} server smtp options\n\t */\n\tconstructor(server: Partial<SMTPConnectionOptions>) {\n\t\tthis.smtp = new SMTPConnection(server);\n\t}\n\n\t/**\n\t * @public\n\t * @template {Message | MessageHeaders} T\n\t * @param {T} msg the message to send\n\t * @param {MessageCallback<T>} callback receiver for the error (if any) as well as the passed-in message / headers\n\t * @returns {void}\n\t */\n\tpublic send<T extends Message | MessageHeaders>(\n\t\tmsg: T,\n\t\tcallback: MessageCallback<T>\n\t): void {\n\t\tconst message =\n\t\t\tmsg instanceof Message\n\t\t\t\t? msg\n\t\t\t\t: this._canMakeMessage(msg)\n\t\t\t\t? new Message(msg)\n\t\t\t\t: null;\n\n\t\tif (message == null) {\n\t\t\tcallback(new Error('message is not a valid Message instance'), msg);\n\t\t\treturn;\n\t\t}\n\n\t\tconst { isValid, validationError } = message.checkValidity();\n\n\t\tif (isValid) {\n\t\t\tconst stack = this.createMessageStack(message, callback);\n\t\t\tif (stack.to.length === 0) {\n\t\t\t\treturn callback(new Error('No recipients found in message'), msg);\n\t\t\t}\n\t\t\tthis.queue.push(stack);\n\t\t\tthis._poll();\n\t\t} else {\n\t\t\tcallback(new Error(validationError), msg);\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * @template {Message | MessageHeaders} T\n\t * @param {T} msg the message to send\n\t * @returns {Promise<T>} a promise that resolves to the passed-in message / headers\n\t */\n\tpublic sendAsync<T extends Message | MessageHeaders>(msg: T) {\n\t\treturn new Promise<Message>((resolve, reject) => {\n\t\t\tconsole.log(\n\t\t\t\t`EMAILJS::INTERNAL::LOGGER - startSend; message: {${msg.text}}`\n\t\t\t);\n\n\t\t\tconst time = Date.now();\n\t\t\tconst intervalLogger = setInterval(() => {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`EMAILJS::INTERNAL::LOGGER - time: ${time - Date.now()}; message: {${\n\t\t\t\t\t\tmsg.text\n\t\t\t\t\t}}`\n\t\t\t\t);\n\t\t\t}, 10000);\n\n\t\t\tthis.send(msg, (err, message) => {\n\t\t\t\tif (err != null) {\n\t\t\t\t\tclearInterval(intervalLogger);\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\t// unfortunately, the conditional type doesn't reach here\n\t\t\t\t\t// fortunately, we only return a `Message` when err is null, so this is safe\n\t\t\t\t\tclearInterval(intervalLogger);\n\t\t\t\t\tresolve(message as Message);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @description Converts a message to the raw object used by the internal stack.\n\t * @param {Message} message message to convert\n\t * @param {MessageCallback} callback errback\n\t * @returns {MessageStack} raw message object\n\t */\n\tpublic createMessageStack(\n\t\tmessage: Message,\n\t\tcallback: MessageCallback = function () {\n\t\t\t/* ø */\n\t\t}\n\t) {\n\t\tconst [{ address: from }] = addressparser(message.header.from);\n\t\tconst stack = {\n\t\t\tmessage,\n\t\t\tto: [] as ReturnType<typeof addressparser>,\n\t\t\tfrom,\n\t\t\tcallback: callback.bind(this),\n\t\t} as MessageStack;\n\n\t\tconst {\n\t\t\theader: { to, cc, bcc, 'return-path': returnPath },\n\t\t} = message;\n\n\t\tif ((typeof to === 'string' || Array.isArray(to)) && to.length > 0) {\n\t\t\tstack.to = addressparser(to);\n\t\t}\n\n\t\tif ((typeof cc === 'string' || Array.isArray(cc)) && cc.length > 0) {\n\t\t\tstack.to = stack.to.concat(\n\t\t\t\taddressparser(cc).filter(\n\t\t\t\t\t(x) => stack.to.some((y) => y.address === x.address) === false\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif ((typeof bcc === 'string' || Array.isArray(bcc)) && bcc.length > 0) {\n\t\t\tstack.to = stack.to.concat(\n\t\t\t\taddressparser(bcc).filter(\n\t\t\t\t\t(x) => stack.to.some((y) => y.address === x.address) === false\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif (typeof returnPath === 'string' && returnPath.length > 0) {\n\t\t\tconst parsedReturnPath = addressparser(returnPath);\n\t\t\tif (parsedReturnPath.length > 0) {\n\t\t\t\tconst [{ address: returnPathAddress }] = parsedReturnPath;\n\t\t\t\tstack.returnPath = returnPathAddress as string;\n\t\t\t}\n\t\t}\n\n\t\treturn stack;\n\t}\n\n\t/**\n\t * @protected\n\t * @returns {void}\n\t */\n\tprotected _poll() {\n\t\tif (this.timer != null) {\n\t\t\tclearTimeout(this.timer);\n\t\t}\n\n\t\tif (this.queue.length) {\n\t\t\tif (this.smtp.state() == SMTPState.NOTCONNECTED) {\n\t\t\t\tthis._connect(this.queue[0]);\n\t\t\t} else if (\n\t\t\t\tthis.smtp.state() == SMTPState.CONNECTED &&\n\t\t\t\t!this.sending &&\n\t\t\t\tthis.ready\n\t\t\t) {\n\t\t\t\tthis._sendmail(this.queue.shift() as MessageStack);\n\t\t\t}\n\t\t}\n\t\t// wait around 1 seconds in case something does come in,\n\t\t// otherwise close out SMTP connection if still open\n\t\telse if (this.smtp.state() == SMTPState.CONNECTED) {\n\t\t\tthis.timer = setTimeout(() => this.smtp.quit(), 1000);\n\t\t}\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} stack stack\n\t * @returns {void}\n\t */\n\tprotected _connect(stack: MessageStack) {\n\t\t/**\n\t\t * @param {Error} err callback error\n\t\t * @returns {void}\n\t\t */\n\t\tconst connect = (err: Error) => {\n\t\t\tif (!err) {\n\t\t\t\tconst begin = (err: Error) => {\n\t\t\t\t\tif (!err) {\n\t\t\t\t\t\tthis.ready = true;\n\t\t\t\t\t\tthis._poll();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstack.callback(err, stack.message);\n\n\t\t\t\t\t\t// clear out the queue so all callbacks can be called with the same error message\n\t\t\t\t\t\tthis.queue.shift();\n\t\t\t\t\t\tthis._poll();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif (!this.smtp.authorized()) {\n\t\t\t\t\tthis.smtp.login(begin);\n\t\t\t\t} else {\n\t\t\t\t\tthis.smtp.ehlo_or_helo_if_needed(begin);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstack.callback(err, stack.message);\n\n\t\t\t\t// clear out the queue so all callbacks can be called with the same error message\n\t\t\t\tthis.queue.shift();\n\t\t\t\tthis._poll();\n\t\t\t}\n\t\t};\n\n\t\tthis.ready = false;\n\t\tthis.smtp.connect(connect);\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} msg message stack\n\t * @returns {boolean} can make message\n\t */\n\tprotected _canMakeMessage(msg: MessageHeaders) {\n\t\treturn (\n\t\t\tmsg.from &&\n\t\t\t(msg.to || msg.cc || msg.bcc) &&\n\t\t\t(msg.text !== undefined || this._containsInlinedHtml(msg.attachment))\n\t\t);\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageAttachment | MessageAttachment[]} attachment attachment\n\t * @returns {boolean} whether the attachment contains inlined html\n\t */\n\tprotected _containsInlinedHtml(\n\t\tattachment?: MessageAttachment | MessageAttachment[]\n\t) {\n\t\tif (Array.isArray(attachment)) {\n\t\t\treturn attachment.some((att) => {\n\t\t\t\treturn this._isAttachmentInlinedHtml(att);\n\t\t\t});\n\t\t} else {\n\t\t\treturn this._isAttachmentInlinedHtml(attachment);\n\t\t}\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageAttachment} attachment attachment\n\t * @returns {boolean} whether the attachment is inlined html\n\t */\n\tprotected _isAttachmentInlinedHtml(attachment?: MessageAttachment) {\n\t\treturn (\n\t\t\tattachment &&\n\t\t\t(attachment.data || attachment.path) &&\n\t\t\tattachment.alternative === true\n\t\t);\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} stack stack\n\t * @param {function(MessageStack): void} next next\n\t * @returns {function(Error): void} callback\n\t */\n\tprotected _sendsmtp(stack: MessageStack, next: (msg: MessageStack) => void) {\n\t\t/**\n\t\t * @param {Error} [err] error\n\t\t * @returns {void}\n\t\t */\n\t\treturn (err: Error) => {\n\t\t\tif (!err && next) {\n\t\t\t\tnext.apply(this, [stack]);\n\t\t\t} else {\n\t\t\t\t// if we snag on SMTP commands, call done, passing the error\n\t\t\t\t// but first reset SMTP state so queue can continue polling\n\t\t\t\tthis.smtp.rset(() => this._senddone(err, stack));\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} stack stack\n\t * @returns {void}\n\t */\n\tprotected _sendmail(stack: MessageStack) {\n\t\tconst from = stack.returnPath || stack.from;\n\t\tthis.sending = true;\n\t\tthis.smtp.mail(this._sendsmtp(stack, this._sendrcpt), '<' + from + '>');\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} stack stack\n\t * @returns {void}\n\t */\n\tprotected _sendrcpt(stack: MessageStack) {\n\t\tif (stack.to == null || typeof stack.to === 'string') {\n\t\t\tthrow new TypeError('stack.to must be array');\n\t\t}\n\n\t\tconst to = stack.to.shift()?.address;\n\t\tthis.smtp.rcpt(\n\t\t\tthis._sendsmtp(stack, stack.to.length ? this._sendrcpt : this._senddata),\n\t\t\t`<${to}>`\n\t\t);\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} stack stack\n\t * @returns {void}\n\t */\n\tprotected _senddata(stack: MessageStack) {\n\t\tthis.smtp.data(this._sendsmtp(stack, this._sendmessage));\n\t}\n\n\t/**\n\t * @protected\n\t * @param {MessageStack} stack stack\n\t * @returns {void}\n\t */\n\tprotected _sendmessage(stack: MessageStack) {\n\t\tconst stream = stack.message.stream();\n\n\t\tstream.on('data', (data) => this.smtp.message(data));\n\t\tstream.on('end', () => {\n\t\t\tthis.smtp.data_end(\n\t\t\t\tthis._sendsmtp(stack, () => this._senddone(null, stack))\n\t\t\t);\n\t\t});\n\n\t\t// there is no way to cancel a message while in the DATA portion,\n\t\t// so we have to close the socket to prevent a bad email from going out\n\t\tstream.on('error', (err) => {\n\t\t\tthis.smtp.close();\n\t\t\tthis._senddone(err, stack);\n\t\t});\n\t}\n\n\t/**\n\t * @protected\n\t * @param {Error} err err\n\t * @param {MessageStack} stack stack\n\t * @returns {void}\n\t */\n\tprotected _senddone(err: Error | null, stack: MessageStack) {\n\t\tthis.sending = false;\n\t\tstack.callback(err, stack.message);\n\t\tthis._poll();\n\t}\n}\n"],"names":["CRLF","readFile","closeFileSync","closeFile","openFile","close"],"mappings":"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"}